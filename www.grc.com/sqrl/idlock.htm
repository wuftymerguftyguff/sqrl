<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><title>GRC's&nbsp;|&nbsp;SQRL Secure Quick Reliable Login Identity Lock&nbsp;&nbsp;</title>
<meta name="keywords" content="SQRL Secure Quick Reliable Login Identity Lock, GRC, Gibson Research Corporation, Steve Gibson" />
<meta name="description" content="SQRL Secure Quick Reliable Login Identity Lock" />
<meta name="sitemenu" content=" " />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="pics-label" content='(pics-1.1 "http://www.rsac.org/ratingsv01.html" l gen true comment "RSACi North America Server" by "offices_@_grc.com" for "https://www.grc.com" on "1998.03.30T21:20-0800" r (n 0 s 0 v 0 l 0))' />
<meta http-equiv="pics-label" content='(pics-1.1 "http://www.icra.org/ratingsv02.html" l gen true for "https://www.grc.com" r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true for "https://www.grc.com" r (n 0 s 0 v 0 l 0))' />
<link rel="icon" href="https://www.grctech.com/_ktwlu00c0qm0o_/favicon.ico" type="image/x-icon" />
<link rel="shortcut icon" href="https://www.grctech.com/_ktwlu00c0qm0o_/favicon.ico" type="image/x-icon" />
<link rel="meta" href="https://www.grc.com/labels.rdf" type="application/rdf+xml" title="ICRA labels" />
<link rel="stylesheet" media="all" type="text/css" href="https://www.grc.com/grc.css" />
<link rel="stylesheet" media="all" type="text/css" href="https://www.grc.com/mainmenu.css" />
<link rel="stylesheet" media="all" type="text/css" href="https://www.grctech.com/_ktwlu00c0qm0o_/thirdparty.css" />

<style type="text/css">
 .greenhead { text-align:center; color:#008800; font-size:16pt; font-family:arial,helvetica; font-weight:bold; }
 .callout	{ background:#f0f0ff; padding:1em; margin:1em 0 1em 1em; border-left:#6666ff solid 2px; }
 .callsubj	{ font-family:arial; font-size:11pt; font-weight:bold; }
 .greynote	{ color:#666; font-size:smaller; margin:-0.5em 0 2em 1.5em }
 .greensub	{ color:#008800; text-align:center; margin-top:0.5em; font-family:arial,helvetica; font-weight:bold; }
 .greybox   { padding:1em; margin:2.0em 0; background:#f8f8f8; border:#dddddd solid 2px; }
 .greybox2  { padding:1.5em 2em; margin:2.0em 0; background:#f8f8f8; border:#dddddd solid 4px; }
 .blackpara { color:#000; margin:0.25em 0 0; }
 .centerarial { text-align:center; font-family:arial; font-size:larger; }
 .lsa			{ font-size:larger; margin-top:1em }
 .sectiondiv{ border-top:#00A 3px solid; font-size:20pt; margin-top:1em; padding-top:0.25em }
 .redparam { font-family:'Courier New', Courier, monospace; font-weight:bold; color:#900; font-size:large; }
 .parample { color:#000; font-family: 'Courier New', Courier, monospace; font-size:20pt; }
 .urltxt   { color:#0000CC; font-family: 'Courier New', Courier, monospace; font-weight:bold; font-size:17px; }
 .greyfade { font-style:italic; color:#aaa; }
 .block    { margin:10px 0 10px 0.25em; padding-left:0.5em; border-left:#00f 2px solid; }
 .comment  { font-weight: normal; color:#888; font-size:smaller;}
 .repel span a { font-weight: normal; color:#888; font-size:smaller; }	/* the >> in the drop-down menus which link to sub-menus */

</style>

</head><body><a name="top"></a>

<!-- ########################## GRC Masthead Menu ########################## -->

<div class="menuminwidth0"><div class="menuminwidth1"><div class="menuminwidth2">
<div id="masthead">
	<a href="https://www.grc.com/default.htm"><img id="mastheadlogo" src="https://www.grc.com/mh-logo.gif" width="286" height="24" alt="Gibson Research Corporation" title="" /></a>
	<img id="focus" src="https://www.grc.com/mh-focus.gif" width="121" height="13" alt="" title="What we're about" />
	<a href="https://www.grc.com/news.htm"><img id="blogicon" src="https://www.grc.com/image/menublogicon.png" width="22" height="22" alt="blog icon" title="To our news and announcements page" /></a>
	<a href="https://www.grc.com/news.htm"><img id="twittericon" src="https://www.grc.com/image/menutwittericon.png" width="22" height="22" title="To our news and announcements page" alt="Twitter Icon"/></a>
	<a href="https://www.grc.com/news.htm"><img id="rssicon" src="https://www.grc.com/image/menurssicon.png" width="22" height="22" title="To our news and announcements page" alt="RSS Icon" /></a>

	<form action="https://www.google.com/search.htm" id="searchbox_000064552291181981813:y8yi5go2xza" onsubmit="javascript: this.action='https://www.grc.com/search.htm'">
		<input type="hidden" name="cx" value="000064552291181981813:y8yi5go2xza" />
		<input type="hidden" name="cof" value="FORID:11" />
		<input id="text" type="text" name="q" maxlength="256" />
		<input id="search" type="image" name="sa" value="Search" src="https://www.grc.com/mh-srch.gif" alt="&nbsp;[Search]" title="" />
	</form>
</div>

<div class="menu">

<ul>
	<li><a href="https://www.grc.com/default.htm"><img src="https://www.grc.com/mb-home.gif" width="76" height="18" alt="[Home]" title="" /><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
		<ul class="leftbutton">
			<li><a href="https://www.grc.com/purchasing.htm">&nbsp;Purchasing</a></li>
			<li><a href="https://www.grc.com/sales.htm">&nbsp;Sales Support</a></li>
			<li><a href="https://www.grc.com/support.htm">&nbsp;Technical Support</a></li>
			<li><a href="https://www.grc.com/default.htm#bottom">&nbsp;Contact Us</a></li>
			<li><a href="https://www.grc.com/news.htm">&nbsp;Blogs, Twitter &amp; RSS</a></li>
			<li><a href="https://www.grc.com/privacy.htm">&nbsp;Privacy Policy</a></li>
<!--			<li><a href="/siteoptions.htm">&nbsp;Site Options</a></li>			-->
			<li><a href="https://www.grc.com/stevegibson.htm">&nbsp;Steve's Projects Page</a></li>
			<li><a href="https://www.grc.com/resume.htm">&nbsp;Steve's Old Resume</a></li>
		</ul>
		<!--[if lte IE 6]></td></tr></table></a><![endif]-->
	</li>
</ul>

<ul>
	<li><a href="https://www.grc.com/sr/spinrite.htm"><img src="https://www.grc.com/mb-products.gif" width="96" height="18" alt="[Products]" title="" /><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
		<ul>
			<li><a href="https://www.grc.com/sr/spinrite.htm">&nbsp;General information</a></li>
			<li><a href="https://www.grc.com/sr/whatitdoes.htm">&nbsp;What SpinRite Does</a></li>
			<li><a href="https://www.grc.com/sr/testimonials.htm">&nbsp;User testimonials</a></li>
			<li><a href="https://www.grc.com/sr/smart.htm">&nbsp;S.M.A.R.T. Monitor</a></li>
			<li><a href="https://www.grc.com/cs/prepurch.htm">&nbsp;Purchase SpinRite</a></li>
			<li><a href="https://www.grc.com/sr/faq.htm">&nbsp;FAQ</a></li>
			<li><a href="https://www.grc.com/sr/themovie.htm">&nbsp;Demo Videos</a></li>
			<li><a href="https://www.grc.com/sr/kb/sata.htm">&nbsp;Knowledgebase: SATA</a></li>
			<li><a href="https://www.grc.com/sr/kb/badbios.htm">&nbsp;Knowledgebase: BIOS</a></li>
			<li><a href="https://www.grc.com/sroverview.htm">&nbsp;SpinRite v5.0 pages</a></li>
		</ul>
	<!--[if lte IE 6]></td></tr></table></a><![endif]-->
	</li>
</ul>

<ul>
	<li><a href="https://www.grc.com/x/ne.dll?bh0bkyd2"><img src="https://www.grc.com/mb-services.gif" width="94" height="18" alt="[Services]" title="" /><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
		<ul>
			<li><a href="https://www.grc.com/x/ne.dll?bh0bkyd2">&nbsp;ShieldsUP!</a></li>
			<li><a href="https://www.grc.com/revocation.htm">&nbsp;Certificate Revocation</a></li>
			<li><a href="https://www.grc.com/haystack.htm">&nbsp;Password Haystacks</a></li>
			<li><a href="https://www.grc.com/fingerprints.htm">&nbsp;HTTPS Fingerprints</a></li>			
			<li><a href="https://www.grc.com/securitynow.htm">&nbsp;Security Now!</a></li>
			<li><a href="https://www.grc.com/dns/dns.htm">&nbsp;DNS Spoofability Test</a></li>
			<li><a href="https://www.grc.com/passwords.htm">&nbsp;Perfect Passwords</a></li>
			<li><a href="https://www.grc.com/ppp.htm">&nbsp;PPP Passwords</a></li>
			<li><a href="https://www.grc.com/media.htm">&nbsp;Tech TV video clips</a></li>
			<li><a href="https://www.grc.com/discussions.htm">&nbsp;Newsgroup Discussions</a></li>
		</ul>
		<!--[if lte IE 6]></td></tr></table></a><![endif]-->
	</li>
</ul>

<ul>
	<li><a href="https://www.grc.com/freepopular.htm"><img src="https://www.grc.com/mb-freeware.gif" width="98" height="18" alt="[Freeware]" title="" /><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
		<ul class="skinny">
			<li><a href="idlock.htm"><span class="drop"><span>Security</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/lt/leaktest.htm">&nbsp;Leaktest</a></li>
					<li><a href="https://www.grc.com/securable.htm">&nbsp;Securable</a></li>
					<li><a href="https://www.grc.com/stm/shootthemessenger.htm">&nbsp;Shoot the messenger</a></li>
					<li><a href="https://www.grc.com/unpnp/unpnp.htm">&nbsp;Unplug n' Pray</a></li>
					<li><a href="https://www.grc.com/freeware/dcom.htm">&nbsp;DCOMbobulator</a></li>
					<li><a href="https://www.grc.com/wmf/wmf.htm">&nbsp;MouseTrap</a></li>
					<li><a href="https://www.grc.com/wmf/wmf.htm">&nbsp;MouseTrapCmd</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>
	
			<li><a href="idlock.htm"><span class="drop"><span>Utilities</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/never10.htm">&nbsp;Never 10&nbsp;&nbsp;(no upgrade)</a></li>
					<li><a href="https://www.grc.com/dns/benchmark.htm">&nbsp;DNS Benchmark</a></li>
					<li><a href="https://www.grc.com/wizmo/wizmo.htm">&nbsp;Wizmo</a></li>
					<li><a href="https://www.grc.com/id/idserve.htm">&nbsp;ID Serve</a></li>
					<li><a href="https://www.grc.com/freeware/clickey.htm">&nbsp;ClicKey</a></li>
					<li><a href="https://www.grc.com/ct/cleartype.htm">&nbsp;Free &amp; Clear</a></li>
					<li><a href="https://www.grc.com/tip/id.htm">&nbsp;IDentity (ASPI)</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>
	
			<li><a href="idlock.htm"><span class="drop"><span>Obsolete</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/cih/cih.htm">&nbsp;FIX-CIH</a></li>
					<li><a href="https://www.grc.com/tip/clickdeath.htm">&nbsp;TIP (trouble in paradise)</a></li>
					<li><a href="https://www.grc.com/oo-update.htm">&nbsp;OptOut</a></li>
					<li><a href="https://www.grc.com/xpdite/xpdite.htm">&nbsp;XPdite</a></li>
					<li><a href="https://www.grc.com/faq-shieldsup.htm">&nbsp;NoShare</a></li>
					<li><a href="https://www.grc.com/faq-shieldsup.htm">&nbsp;LetShare</a></li>
					<li><a href="https://www.grc.com/pw/patchwork.htm">&nbsp;Patchwork</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>
		</ul>
		<!--[if lte IE 6]></td></tr></table></a><![endif]-->
	</li>
</ul>

<ul>
	<li><a href="idlock.htm"><img src="https://www.grc.com/mb-research.gif" width="98" height="18" alt="[Research]" title="" /><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
		<ul class="skinny">
			<li><a href="idlock.htm"><span class="drop"><span>General</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/malware.htm">&nbsp;Malware Repository</a></li>
					<li><a href="sqrl.htm">&nbsp;SQRL&nbsp;Login&nbsp;Technology</a></li>					
					<li><a href="https://www.grc.com/ssl/ev.htm">&nbsp;EV SSL/TLS Certificates</a></li>
					<li><a href="https://www.grc.com/otg/uheprng.htm">&nbsp;Ultra-high entropy PRNG</a></li>
					<li><a href="https://www.grc.com/menudemo.htm">&nbsp;Pure CSS web menus</a></li>
					<li><a href="https://www.grc.com/nat/nat.htm">&nbsp;NAT router security</a></li>
					<li><a href="https://www.grc.com/pda/palmpower.htm">&nbsp;PDA max battery life</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>
	
			<li><a href="idlock.htm"><span class="drop"><span>Pending</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/nf/netfilter.htm">&nbsp;GRC NetFilter</a></li>
					<li><a href="https://www.grc.com/tp/trustpuppy.htm">&nbsp;TrustPuppy</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>
	
			<li><a href="idlock.htm"><span class="drop"><span>Historical</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/worms/25-01-03.htm">&nbsp;Worm wars of 2001</a></li>
					<li><a href="https://www.grc.com/downloaders.htm">&nbsp;File downloader spying</a></li>
					<li><a href="https://www.grc.com/ct/ctwhat.htm">&nbsp;Sub-pixel font rendering</a></li>
					<li><a href="https://www.grc.com/su/earthlink.htm">&nbsp;Earthlink browser tag</a></li>
					<li><a href="https://www.grc.com/tip/codfaq1.htm">&nbsp;ZIP &amp; JAZ click of death</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>
	
			<li><a href="idlock.htm"><span class="drop"><span>Dormant</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/vpn/vpn.htm">&nbsp;OpenVPN</a></li>
					<li><a href="https://www.grc.com/r&amp;d/assimilator.htm">&nbsp;The Assimilator</a></li>
					<li><a href="https://www.grc.com/aspi_me.htm">&nbsp;ASPI ME</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>

			<li><a href="https://www.grc.com/health.htm"><span class="drop"><span>Health</span>&raquo;</span><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
				<ul>
					<li><a href="https://www.grc.com/health.htm">&nbsp;Health Homepage</a></li>
					<li><a href="https://www.grc.com/health/lowcarb.htm">&nbsp;The Low Carb Choice</a></li>
					<li><a href="https://www.grc.com/health/vitamin-d.htm">&nbsp;Vitamin D</a></li>
					<li><a href="https://www.grc.com/health/sleep/healthy_sleep_formula.htm">&nbsp;Healthy Sleep Formula</a></li>
					<li><a href="https://www.grc.com/zeo.htm">&nbsp;Zeo Sleep Manager Pro</a></li>
				</ul>
				<!--[if lte IE 6]></td></tr></table></a><![endif]-->
			</li>

		</ul>
		<!--[if lte IE 6]></td></tr></table></a><![endif]-->
	</li>
</ul>

<ul>
	<li id="other"><a href="https://www.grc.com/pdp-8/pdp-8.htm"><img src="https://www.grc.com/mb-other.gif" width="77" height="18" alt="[Other]" title="" /><!--[if gt IE 6]><!--></a><!--<![endif]--><!--[if lt IE 7]><table border="0" cellpadding="0" cellspacing="0"><tr><td><![endif]-->
		<ul>
			<li><a href="https://www.grc.com/pdp-8/pdp-8.htm">&nbsp;PDP-8 Computers</a></li>
			<li><a href="https://www.grc.com/misc/truecrypt/truecrypt.htm">&nbsp;TrueCrypt Repository</a></li>
			<li><a href="https://www.grc.com/Big-Number-Calculator.htm">&nbsp;Big Number Calculator</a></li>
			<li><a href="https://groups.google.com/forum/#!forum/portable-sound-blaster">&nbsp;Portable Sound Blaster</a></li>
		</ul>
		<!--[if lte IE 6]></td></tr></table></a><![endif]-->
	</li>
</ul>

</div> <!-- close "menu" div -->
<hr style="display:none" />
</div></div></div> <!-- close the "minwidth" wrappers -->
<!-- ###################### END OF GRC MASTHEAD MENU  ###################### -->


<center>

<span class="repel regionhead"><span>SQRL</span>SQRL</span>
<table style="margin-bottom:1em;" cellpadding="0" cellspacing="0"><tr valign="bottom"><td rowspan="2"><img src="SQRL_Logo_80x80.png" width="80" height="80" alt="100x100 SQRL Logo" /></td><td rowspan="2">&nbsp;&nbsp;&nbsp;</td><td style="color:#bb0000; font-size:22pt;"><b>S</b>ecure <b>Q</b>uick <b>R</b>eliable <b>L</b>ogin</td></tr><tr valign="bottom"><td style="font-size:10.5pt;">A highly secure, comprehensive, easy-to-use replacement<br />for usernames, passwords, reminders, one-time-code<br />authenticators<b>&nbsp;.&nbsp;.&nbsp;.</b> and everything else.</td></tr></table><img src="https://www.grc.com/image/darkbluepixel.gif" width="90%" height="4" border="0" alt="divider" /><div class="red_tight_headline" style="font-size:20pt; margin-top:1em;">SQRL's <b>Identity Lock</b> Protocol</div>

<div id="embelow" class="pagecontainer">

<div class="paraleadin">The problem:</div><span class="font7px"><br /></span>The appealing elegance and simplicity of the SQRL system is, more than anything else, the idea that a single globally unique user can be identified by a single globally unique ID (their 256-bit identity master key) while enforcing their privacy by presenting a <em>different</em> unique 256-bit identifier to <em>every</em> website on the Internet. The simple SQRL protocol accomplishes this using only a few cryptographic operations, and in a perfect hacker-free world with perfect users we would be finished, and could declare a job well done.

<p>But the world is not hacker-free, and user's are not always perfect. So for SQRL to have the best chance of achieving wide adoption, it needs to not only be <em>clearly superior</em> to alternatives, but also work to address every criticism and concern. It must be able to offer answers to improbable if inevitable &#8220;what if&#8221; challenges. And, ultimately, its features must assure both users and websites that it will protect them, as well as possible, against both known and unknown threats.</p>

<p class="greenhead" style="font-size:11pt;">SQRL's Identity Lock answers the question: <i>&#8220;But what if someone,<br />someday, DOES obtain unencrypted access to a user's identity?&#8221;</i></p>

<p>To facilitate SQRL's possible life-long use by an individual, we felt that the user should be allowed to retire their current SQRL identity if, for any reason, they became concerned that it might no longer be secure and safe to use. Although today's individual websites will likely permit their users to perform a manual process involving traditional usernames, passwords, and eMail<b>&nbsp;.&nbsp;.&nbsp;.</b> what if the SQRL solution were to succeed so well that it eventually replaced other, current forms of authentication? Or what if users wishing the highest degree of security and anonymity established accounts lacking any other form of identity verification? In those cases, &#8220;out of band&#8221; SQRL identity changes would be impossible and the SQRL system would need to provide its own means for allowing its users to securely retire and replace worrisome or compromised identities. <b>This is that system, here today, and part of the v1.0 SQRL specification.</b></p>

<p>Even though the only known weakness in the base SQRL system is user password compromise, and even though the system's password management system renders password guessing and hacking entirely infeasible, a user <em>could</em> use a very poor password or have their SQRL smartphone or desktop client hacked. The result would be a potential compromise of their entire Internet-wide SQRL-controlled identity. Because the &#8220;but what if that happens?&#8221; question can be asked, we have designed an answer.</p>

<p>Although ID Lock is independent of, and runs parallel to, the base SQRL identification protocol, it offers such strong and useful protection that it is a required component of the SQRL specification which every SQRL client and web server should implement.</p>

<p class="greenhead" style="font-size:11pt;">SQRL's ID Lock provides a frictionless means for securely<br />authorizing SQRL client-mediated (&#8220;in band&#8221;) identity changes,<br />while simultaneously preventing unauthorized identity modification.</p>

<div class="bold_red_arial lsa" style="border-top:#0000aa solid 4px; padding:0.25em 0; margin-top:2em;">The User's Experience</div><span class="font7px"><br /></span>

ID Lock operates by creating a second &#8220;master key&#8221; different from SQRL's regular identity master key. This second &#8220;<em>Identity Unlock Key</em>&#8221; is created when a user first sets up and begins using SQRL. It never changes, it may never be needed, but it should never be lost. To prevent attackers from having <em>any</em> opportunity to gain access to this key, it is <em>never</em> stored in <em>any</em> SQRL client application, and it is <em>never</em> written to non-volatile storage. After it is created, it must be printed onto paper as a graphic QR code or exported as a short text file and stored securely. Then it is <em>completely removed</em> from the SQRL device or application that created it. It cannot, and must not, remain accessible &#8220;online&#8221; in any fashion. This typically ends the user's involvement and responsibility for their identity management. The special &#8220;Identity Unlock Key&#8221; will likely (hopefully) never be needed, but in case it <em>is</em> ever needed it should not be lost.

<p>To protect the user, once a user has established their identity with a website, the only (automated) way for the website to accept a new identity for the user is for a SQRL client to be temporarily re-loaded with the always-offline (super secret) Identity Unlock Key. Since this key is never normally present in any of the user's SQRL clients, it could never have become known to any attacker. Therefore, the presence of that key proves to the site that this really is the authentic user, not someone who may have somehow obtained the user's daily operation master key and password. This allows the user to retire and replace their previous identity with a new one so that anyone who <em>may</em> have obtained their master key and password will be unable to use them.</p>

<p>The Identity Unlock Key is <em>never</em> stored in the SQRL client, nor even electronically &#8220;online&#8221; in the computer, because no matter what, bad guys must <em>never</em> be allowed to obtain it. It exists outside, on paper only, specifically so that no possible breach of the user's normal daily operating security might possibly result in its disclosure. (Note that to be used, an attacker still needs to obtain the user's identity master key and matching password. So the offline Identity Unlock Key also enjoys all of the protections provided by the rest of the system. We just don't want it to be present in SQRL clients which might be hacked and the key obtained.)</p>

<p>Without the Identity Unlock Key, no one, not even the valid SQRL user, can alter their online identity. This means that if <b><i>&#8220;but what if&#8221;</i></b> actually did ever happen, although bad guys might gain access to a user's account, they could <em>never</em> lock the user out by changing the account's SQRL identity. Then, as soon as malicious access was detected, or preemptively, if a user was concerned that their SQRL identity master key and SQRL password might be compromised, the valid SQRL user could load their offline Identity Unlock key, retire and replace their own identity master key, then login to their most important web sites using SQRL to immediately replace their SQRL identity for every site they visit.</p>

<p class="greenhead" style="font-size:11pt;">If the worst happened, and a user's decrypted SQRL identity somehow<br />escaped from their control, the user can securely cancel &amp; replace<br />their lost identity, rendering the stolen (old) identity useless.</p>

<div class="classy_grey">
Note that since there <em>could</em> be an emergency situation where a user needs to block their SQRL identity for specific sites, but they might not have immediate access to their &#8220;Identity Unlock Key&#8221;, SQRL permits a user to <em>disable</em> their current identity at a website without needing Identity Unlock Key. They must then later use their Identity Unlock Key to either re-enable or replace their identity. But they can, in an emergency, disable any existing identity.</div>

<div class="bold_red_arial lsa" style="border-top:#0000aa solid 4px; padding:0.25em 0; margin-top:2em;">The Identity Lock Protocol Operation</div><span class="font7px"><br /></span>

In keeping with SQRL's use of Dan Bernstein's highly efficient and carefully designed (NSA-free) Curve25519 elliptic curve cryptosystem, the SQRL ID Lock protocol uses an elliptic curve version of Diffie-Hellman (DH) Key Agreement (KA). Therefore, our use would be known as Elliptic Curve Diffie-Hellman, or ECDH. For additional information see <a href="http://cr.yp.to/ecdh.html">Dan Bernstein's ECDH web page</a>, and his <a href="http://cr.yp.to/ecdh/curve25519-20060209.pdf">Curve25519 PDF white paper</a>.

<p><div class="larger_red_arial">What this technology achieves</div>
The Identity Lock protocol is admittedly a bit tricky. It needs to be more complex than SQRL's comparatively straightforward identification protocol because its requirements are much more complex: When operating, it must be able to generate and provide something to every web server so that it's identity can later be proven, but what it generates and provides to each web server cannot in any way identify it to the server, since the SQRL system provides strong anonymity guarantees to prevent web servers from having anything they might compare to identify and track users. And on top of that, since it must also be truly hacker-proof, the system that generates this identity-proving information must not, itself, be able to prove its own identity<b>&nbsp;.&nbsp;.&nbsp;.</b> otherwise a compromised or hacked SQRL client could be used to maliciously prove its identity to &#8220;unlock&#8221; and alter a user's website identification. So we need to be able to provide anonymous identity proof without being able to prove our identity.</p>

<p><div class="larger_red_arial">Traditional DHKA</div>
In the traditional use of DHKA, two parties wish to establish a shared secret key which they will then use to encrypt subsequent communications. So the parties first arrange to obtain each other's public keys. This can be done it full public view so long as no man-in-the-middle is able to intercept and subvert that public key exchange. In other words, a passive eavesdropper can be allowed or assumed to passively <em>observe</em> the exchange so long as they cannot <em>alter</em> it (to insert their own public key(s). Then, with each party having their own matching secret key, each is able to compute the same unique shared secret by applying the DHKA process. This shared secret cannot be computed by anyone having only the public keys, and of course, each party has their own secret key which they never disclose.</p>

<p>If we have public key one (PubKey1) and secret key one (SecKey1) and public key two (PubKey2) and secret key two (SecKey2), then:</p>

<p><center class="urltxt">DHKA( PubKey1, SecKey2 ) = DHKA( PubKey2, SecKey1 )</center></p>

<p><div class="larger_red_arial">SQRL's use of DHKA</div>
Some confusion can result from SQRL's unique application of Diffie-Hellman Key Agreement because it differs from the typical, more symmetrical use of DHKA. SQRL applies DHKA in a different, though valid, fashion. It uses three Diffie-Hellman properties that make it suitable for our needs:

<ul class="tightlist">
<li><b>Secret keys are just random numbers.</b> It's extremely quick and convenient to be able to simply pick a large 256-bit number at random and use it as a secret EC key.</li>
<li><b>Public EC keys have a hash-like one-way relationship with their matching secret key.</b> They are directly derived from their secret counterparts by running them through the EC function. This is a one-way function which, like a hash, does not reveal the secret key from the public key.</li>
<li><b>Opposing pairs of keys combine to form a value that discloses nothing about either of them.</b> Owing to the one-way nature of EC crypto, the &#8220;agreed upon key&#8221; does not reveal either key to attackers. In practice, this characteristic is less than absolutely strong, so the key agreement output is typically run through additional hashing to strongly disconnect it from its source keys.</li></ul>

<p>Each side of the equation above requires two keys, one public and one secret, from each of the parties. And here's the key: <em>If one is missing</em>, the proper value of that side of the equation cannot be calculated and the <em>equality assertion</em> between the two sides cannot be satisfied. The SQRL ID Lock protocol relies upon that simple property.</p>

<p><div class="larger_red_arial">Let's give these four keys their official names</div>
One pair of keys is generated only once and never changes: The secret key is kept and stored offline for use only if the user's identity ever needs to be <em>unlocked</em> and changed. Therefore, we call this the &#8220;<b>Identity Unlock Key</b>.&#8221; Its complimentary public key is retained online in the client and is used to provide identity <em>locking</em> information when the user first introduces themselves to a new website. It's called the &#8220;<b>Identity Lock Key</b>.&#8221;</p>

<p><center class="urltxt" style="font-size:smals;">IdentityLock := MakePublic( IdentityUnlock )</center></p>

<p><center><img src="id-lock-1.png" width="388" height="102" alt="id-lock-1" /></center></p>

<p>The second pair of keys is generated <em>at random</em> every time a user is creating a new SQRL &#8220;identity association&#8221; with a website. First, a random 256-bit &#8220;<b>Random Lock Key</b>&#8221; is created. It is used to generate the identity locking information. Then, from it we generate the complimentary &#8220;<b>Server Unlock Key</b>&#8221; which the web server holds for us.</p>

If we plug these four keys back into the original Diffie-Hellman Key Agreement equation, we get:

</div>
<p><center class="urltxt" style="font-size:smals;">DHKA(IdentityLock,RandomLock) = DHKA(ServerUnlock,IdentityUnlock)</center></p>
<div id="embelow" class="pagecontainer">

<p>As shown in the two equations and schematic diagram below, the system uses three of these four keys to synthesize the fourth Server Unlock Key, and an additional public Verify Unlock Key which are both sent to and retained by the web server:</p>

<p><center><table cellpadding="0" cellspacing="0" class="urltxt">
<tr><td>VerifyUnlock&nbsp;:=&nbsp;</td><td>SignPublic( DHKA( IdentityLock, RandomLock ))</td></tr>
<tr><td>ServerUnlock&nbsp;:=&nbsp;</td><td>MakePublic( RandomLock )</td></tr>
</table></center></p>

<p>The &#8220;SignPublic&#8221; function is the &#8220;crypto_sign_seed_keypair&#8221; function from LibSodium. It is part of the Curve25519 elliptic curve cryptosystem which converts a 256-bit &#8220;seed&#8221; into a pair of signing keys: a private signing key and a public signature verification key. The VerifyUnlock key is the public signature verification key produced by that function.</p>

<p>After examining this glossary of key definitions and functions, we'll carefully step through the identity lock and unlock processes:</p>

<p><div class="larger_red_arial">A brief glossary and definition of terms:</div>

<table cellpadding="0" cellspacing="10">

<tr valign="top"><td align="right"><b>Identity&nbsp;Unlock&nbsp;Key:</b><br />(IUK)</td><td>Randomly generated once, then printed and stored offline. The SQRL client must have access to this secret key for it to synthesize the Unlock Request Signing Key which the client must use to sign any identity change request.</td></tr>

<tr valign="top"><td align="right"><b>Identity&nbsp;Lock&nbsp;Key:</b><br />(ILK)</td><td>Generated once, but it can be regenerated if needed, because it is the public side of the Identity Unlock Key. It is retained by all of the user's SQRL clients and combined with randomly generated Random Lock Keys to create a web site's Verify Unlock Key (which verifies the signatures of any identity change requests).</td></tr>

<tr valign="top"><td align="right"><b>Random&nbsp;Lock&nbsp;Key:</b><br />(RLK)</td><td>Randomly chosen whenever the user is associating their SQRL identity with a new web server. It is used for two things, then discarded: It is mixed with the permanent Identity Lock Key (above) to produce the Verify Unlock Key, which the web server receives and stores. It is also used to create the Server Unlock Key which is also sent to the web server and stored.</td></tr>

<tr valign="top"><td align="right"><b>Server&nbsp;Unlock&nbsp;Key:</b><br />(SUK)</td><td>Generated by the SQRL client then sent to and retained by the web server. When the client later indicates that it wishes to change its identity association, the web server returns this public key to the client. The SQRL client combines it with its reloaded secret Identity Unlock Key to produce the Unlock Request Signing Key which must be used to sign any identity change request.</td></tr>

<tr valign="top"><td align="right"><b>Verify&nbsp;Unlock&nbsp;Key:</b><br />(VUK)</td><td>Received and retained by the web server from the client during the initial SQRL identity association, it is the public key used to verify the signature produced by the Unlock Request Signing Key. The web server will use this key, as it does with the SQRL identification protocol, to verify that the SQRL client is in possession of the matching Unlock Request Signing Key (which it could have only synthesized by combining the web server provided Server Unlock Key and its own secret, reloaded, Identity Unlock Key).</td></tr>

<tr valign="top"><td align="right"><b>Unlock&nbsp;Request&nbsp;Signing<br />Key</b> (URSK):</td><td>Synthesized by the SQRL client by combining the web server supplied Server Unlock Key with the user's secret reloaded Identity Unlock Key. This produces a secret elliptic curve signing key that must be used to sign any SQRL client's identity change requests. The server's matching Verify Unlock Key is the public key used to verify the signature.</td></tr>

</table>

<p><div class="larger_red_arial">How a SQRL identity is associated and locked:</div>
The SQRL client continuously holds onto the <em>Identity Lock Key</em> after it is created from the <em>Identity Unlock Key</em>. We cannot simply give every web server the public Identity Lock Key, because doing that would mean that we were giving every web server the <i>same public key</i><b>&nbsp;.&nbsp;.&nbsp;.</b> which would break one of the SQRL system's most important properties: No ability to link user identities between servers.</p>

<p>Instead, we create a unique randomly derived <em>version</em> of our Identity Lock Key that cannot be traced back to our actual Identity Lock Key. We do this by first generating a new Random Lock Key and use the DHKA function to mix it with our Identity Lock Key (see below). This technically produces a 256-bit value that will be our private identity request signing key, but we don't use or retain it at this stage. Instead, we immediately pass it through Dan Bernstein's elliptic curve signing algorithm to produce its matching signature verifying public key. This becomes the <em>Verify Unlock Key</em> that is sent to and retained by the web server for it future use in verifying the signatures of the client's identity change requests.</p>

<p>In order for the client to later be able to re-synthesize the matching private signing key (which we just ignored and discarded), the Random Lock Key is also passed through a standard Curve25519 Diffie-Hellman Key Agreement (DHKA) function to create its matching public key. This becomes the <em>Server Unlock Key</em> which is sent to the web server for storage. When the SQRL client indicates that it wishes to update this user's identity, the web server returns this key which, when combined with the user's super-secret Identity Unlock Key allows the SQRL client to synthesize the private elliptic curve signing key which is required to sign any identity change requests:</p>

<center><img src="id-lock-2.png" width="443" height="187" alt="id-lock-2" /></center>

<p>When a user is first associating their SQRL identity with web server account (which we refer to as &#8220;identity association&#8221;) the SQRL client generates and the server receives and permanently stores the <em>Server Unlock Key</em> and the <em>Verify Unlock Key</em> which, as shown in the schematic above, are created on-the-fly and derived from a random number and the user's permanent Identity Lock Key. Once those keys have been set for a user, they never need to be changed. They are both unique public keys which disclose nothing about the user's identity. They serve to lock the value of the user's SQRL public identity key, which was provided when the identity association was established.</p>

<p><div class="larger_red_arial">How an identity association is unlocked:</div>
Although this has already been touched upon above, we'll examine it in greater detail here.</p>

<p>In order for an existing SQRL identity association to be re-enabled, updated, replaced or removed, the SQRL client must be able to cryptographically sign its identity change request by regenerating the correct private elliptic curve signing key. In response to the SQRL client's request to change identity association, the web server sends the SQRL client the stored value of the Server Unlock Key. This is the value the SQRL client originally generated and asked the web server to retain for just this eventuality. The Server Unlock Key provides the public half of a standard Diffie-Hellman Key Agreement (DHKA) where the private half is the user's super-secret, normally offline but now reloaded, Identity Unlock Key:</p>

<p><center class="urltxt">UnlockRequestSigning := SignPrivate( DHKA( ServerUnlock, IdentityUnlock ))</center></p>

<p>Similar to the VerifyUnlock key above, the &#8220;SignPrivate&#8221; function is the &#8220;crypto_sign_seed_keypair&#8221; function from LibSodium. It is part of the Curve25519 elliptic curve cryptosystem which converts a 256-bit &#8220;seed&#8221; into a pair of signing keys: a private signing key and a public signature verification key. The UnlockRequestSigning key is the private signing key produced by that function.</p>

<p>Since this is the right-hand side of the original equation above, it reproduces the private <em>Unlock Request Signing Key</em> which was briefly created but never used, other than to produce the matching public signature verifying <em>Verify Unlock Key</em> which the server also stored. The SQRL client combines the web server provided <em>Server Unlock Key</em> with the user's reloaded <em>Identity Unlock Key</em> to reproduce the original <em>Unlock Request Signing Key</em>. The client uses this recreated signing key to cryptographically sign its identity change request and sends that specially signed request to the web server.</p>

<p>The web server uses its stored <em>Verify Unlock Key</em>, which is the matching public signature verification key to verify the request's validity and authenticity, and updates the appropriate entries in the user's SQRL account database.</p>

<p><center><img src="id-lock-3.png" width="481" height="200" alt="id-lock-3" /></center></p>


<div class="bold_red_arial lsa" style="border-top:#0000aa solid 4px; padding:0.25em 0; margin-top:2em;">A few technical notes:</div><span class="font7px"><br /></span>

<ul>

<li>The web server provides a cryptographically strong &#8220;nut&#8221; in every SQRL link URL and with every SQRL client query reply to protect all transactions and signatures from replay attacks.</li>

<li>Note that to protect against replay attacks the web server <em>must</em> verify that the nut value <em>returned</em> by the SQRL client exactly matches the nut it supplied. This prevents an attacker from reusing a previously captured nut to again succeed with a replay attack.</li>

<li>Since a new 256-bit Random Lock Key is only needed when a new identity association is being established with a web server, SQRL's demands for platform entropy are already very minimal. However, the identity lock protocol has very weak entropy requirements. The Random Lock Key is never exposed outside the client and it is situated behind one or two elliptic curve modular multiplications which are lossy one-way functions. So, unlike with SQRL's main operating secret keys&mdash;whose entropy requirements are extreme&mdash;there is little need to worry about or strengthen the generation of this transient and discarded key.</li>

<li>It would have been more convenient to use the SQRL system's existing site-specific public and secret keys instead of continuously generating random keys for the Identity Unlock and Identity Lock keys. But if we had done that, an attacker who had compromised the user's password and identity master key would have been able to compute the value of the Server Unlock and Verify Unlock keys, thus defeating the system's protections. So we went with per-server random key values.</li>

<li>For more information about the detailed operation of Diffie-Hellman key agreement, see the very good wikipedia entries: <a href="http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie&ndash;Hellman key exchange</a> and <a href="http://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman">Elliptic curve Diffie&ndash;Hellman</a>.</li>

</ul>


<div class="bold_red_arial lsa" style="border-top:#0000aa solid 4px; padding:0.25em 0; margin-top:2em;">Useful attributes of this protocol</div><span class="font7px"><br /></span>

This straightforward protocol has the features of:
<ul class="tightlist">
<li>Requires nothing more from the web server other than the storage of two static keys and verifying identity change requests using <em><i>exactly</i></em> the same logic and algorithms already being used by the base SQRL identification system.</li>
<li>Reuses existing SQRL system EC components to smooth implementation and keep overall complexity low.</li>
<li>Synthesizes one side of a DH key agreement without the secret key ever being present.</li>
<li>Preserves anonymity by avoiding any cross-site linkage of identity-locking data.</li>
</ul>

<p class="greenhead" style="font-size:11pt;">If anyone were EVER to obtain access to a user's identity, the user can<br />securely cancel and replace their lost identity, making the stolen<br />identity useless and essentially taking back their lost identity.</p>

</div>

<br /><br />
<center><font style="font-size:smaller;">Secure QR Login (SQRL) Documentation:</font><br />
<table border="0" cellpadding="0" cellspacing="0"><tr><td><div class="linkblock">
<table border="0" cellpadding="0" cellspacing="0"><tr valign="top">
<td>
<div><span>&nbsp;&nbsp;&nbsp;1&nbsp;<span><a href="sqrl.htm">Introduction &amp; overview</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;2&nbsp;<span><a href="userview.htm">The user's view of the application</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;3&nbsp;<span><a href="crypto.htm">Detailed crypto architecture</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;4&nbsp;<span><a href="idlock.htm">The identity lock protocol</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;5&nbsp;<span><a href="key-flow.htm">Client-Side key management</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;6&nbsp;<span><a href="operation.htm">User-interface & operation</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;7&nbsp;<span><a href="phishing.htm">Anti-phishing countermeasures</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;8&nbsp;<span><a href="attacks.htm">Attacks, weaknesses, vulnerabilities</a>&nbsp;</span></span></div>
<div><span>&nbsp;&nbsp;&nbsp;9&nbsp;<span><a href="protocol.htm">Link &amp; query protocol syntax</a>&nbsp;</span></span></div>
<div><span>&nbsp;10&nbsp;<span><a href="semantics.htm">Link &amp; query protocol semantics</a>&nbsp;</span></span></div>
</td>
<td>
<div><span>&nbsp;11&nbsp;<span><a href="storage.htm">SQRL's Secure Storage System</a>&nbsp;</span></span></div>
<div><span>&nbsp;12&nbsp;<span><a href="scrypt.htm">Our use of the SCrypt PBKDF</a>&nbsp;</span></span></div>
<div><span>&nbsp;13&nbsp;<span><a href="client.htm">Client implementation details</a>&nbsp;</span></span></div>
<div><span>&nbsp;14&nbsp;<span><a href="server.htm">Web server behavior</a>&nbsp;</span></span></div>
<div><span>&nbsp;15&nbsp;<span><a href="resources.htm">Implementation resources</a>&nbsp;</span></span></div>
<div><span>&nbsp;16&nbsp;<span><a href="implementations.htm">Projects and finished applications</a>&nbsp;</span></span></div>
<div><span>&nbsp;17&nbsp;<span><a href="commentary.htm">SQRL commentary from the industry</a>&nbsp;</span></span></div>
<div><span>&nbsp;18&nbsp;<span><a href="other.htm">Other related QR code login work</a>&nbsp;</span></span></div>
<div><span>&nbsp;19&nbsp;<span><a href="faq.htm">Frequently Asked SQRL Questions</a>&nbsp;</span></span></div>
<div><span>&nbsp;20&nbsp;<span><a href="feedback.htm">Feedback about SQRL &amp these pages</a>&nbsp;</span></span></div>
</td>
</tr></table></div></td></tr></table>
<br /><table border="0" cellpadding="0" cellspacing="0"><tr><td><a href="idlock.htm#top" target="_top"><img src="https://www.grctech.com/_ktwlu00c0qm0o_/image/grc-icon.gif" width="51" height="51" border="0" alt="Jump to top of page" title="Jump to top of page"/></a></td><td><div style="margin:0 20px;"><font size="-2" color="#777777">Gibson Research Corporation is owned and operated by Steve Gibson.&nbsp;&nbsp;The contents<br />of this page are Copyright (c) 2016 Gibson Research Corporation. SpinRite, ShieldsUP,<br />NanoProbe, and any other indicated trademarks are registered trademarks of Gibson<br />Research Corporation, Laguna Hills, CA, USA. GRC's web and customer <a href="https://www.grc.com/privacy.htm" target="_top">privacy policy</a>.</font></div></td><td><div style="margin:7px 0;"><a href="idlock.htm#top" target="_top"><img src="https://www.grctech.com/_ktwlu00c0qm0o_/image/jumptotop.png" width="52" height="38" border="0" alt="Jump to top of page"  title="Jump to top of page"/></a></div></td></tr></table><br />
<!-- ChangeDetection.com detection="off" -->
<table width="90%" border="0" cellspacing="0" cellpadding="0"><tr><td><font color="#666666" size="-2">Last Edit: Aug 02, 2015 at 14:17 (268.02 days ago)</font></td><td align="right"><font color="#666666" size="-2">Viewed 10 times per day</font></td></tr></table>
</center><a name="bottom"></a></body></html>
